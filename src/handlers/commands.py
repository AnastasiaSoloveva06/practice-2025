from telebot import TeleBot
from db import get_all_faq_keys

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = """
<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ú–æ—Å–ø–æ–ª–∏—Ç–µ—Ö–∞!</b>

–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
‚Ä¢ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã

<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚Üì</b>
"""
    bot.send_message(message.chat.id, welcome_text, 
                   parse_mode='HTML', 
                   reply_markup=make_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.lower()
    
    if '—Ä–∞—Å–ø–∏—Å' in text:
        bot.send_message(message.chat.id, FAQ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'], parse_mode='HTML', disable_web_page_preview=True)
    elif '–∫–æ–Ω—Ç–∞–∫—Ç' in text:
        bot.send_message(message.chat.id, FAQ['–∫–æ–Ω—Ç–∞–∫—Ç—ã'], parse_mode='HTML', disable_web_page_preview=True)
    elif '—É—á–µ–±–Ω' in text or '–º–∞—Ç–µ—Ä–∏–∞–ª' in text:
        bot.send_message(message.chat.id, FAQ['—É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'], parse_mode='HTML')
    elif 'faq' in text or '—á–∞—Å—Ç—ã–µ' in text or '–≤–æ–ø—Ä–æ—Å—ã' in text:
        bot.send_message(message.chat.id, "üîç <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>", 
                        parse_mode='HTML', reply_markup=make_faq_keyboard())
    else:
        if any(word in text for word in ['–ø–æ–ª–∏—Ç–µ—Ö', '–º–æ—Å–ø–æ–ª', '—É–Ω–∏–≤–µ—Ä']):
            try:
                bot.send_chat_action(message.chat.id, 'typing')
                response = giga.chat(f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ú–æ—Å–ø–æ–ª–∏—Ç–µ—Ö–∞. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {message.text}")
                bot.send_message(message.chat.id, f"<i>{response.choices[0].message.content}</i>", parse_mode='HTML')
            except:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            bot.send_message(message.chat.id, "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ú–æ—Å–∫–æ–≤—Å–∫–∏–º –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ FAQ
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith('faq_'):
        faq_type = call.data.split('_')[1]
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, FAQ[faq_type], parse_mode='HTML')
    elif call.data == 'main_menu':
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        start(call.message)
    
    bot.answer_callback_query(call.id)
